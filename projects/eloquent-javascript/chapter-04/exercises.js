////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function range(start, end, step){
 let hold = [];
if (start === end){
  return hold;
} else if (step < 0){
  for (let i = start; i >= end; i--){
    hold.push(i);
  }
  } else if (step > 0){
    for (let i = start; i <= end; i = i + step){
      hold.push(i);
    }
    } else {
      for (let i = start; i <= end; i++){
        hold.push(i);
      }
    }return hold;
  }
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function sum(arr) {
  let hold = 0;
  for (let i = 0; i < arr.length; i++){
    hold += arr[i];
  } return hold;
}


////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  let hold = [];
  for (let i = arr.length - 1; i >= 0; i--){
    hold.push(arr[i]);
  } return hold;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
let hold;
  for (let i = 0; i < Math.floor(arr.length / 2); i++){
    hold = arr[i];
    arr[i] = arr[arr.length - 1 - i];
    arr[arr.length - 1 - i] = hold;
} return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //given an array, create an object for each element in the array while nesting the previous object
  // starting at the last element will be easier
  let obj = {};
  for (let i = array.length - 1; i >= 0; i--){
    if(i === array.length - 1){
      obj.value = array[i];
      obj.rest = null;
    } else{
      obj = {
        value: array[i],
        rest: obj
      };
    }
  } return obj;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// need an array to hold pushed values; return values at end
//
function listToArray(list){
  let hold = [];
  if (list.value){
    hold.push(list.value);
  }
  let nextPos = list.rest;

  while (nextPos){
    hold.push(nextPos.value);
    if (nextPos.rest){
      nextPos = nextPos.rest
    } else {
      break;
    }
  } return hold;
}


////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
let hold = {
    value: element,
    rest: list
  }; return hold;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
 let count = 0;
  let nextPos = list;

  while (nextPos){
      if (count === number) {
    return nextPos.value;
  } else if (nextPos.rest){
    count++
      nextPos = nextPos.rest
    } else {
      break;
    }
  }


}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(obj1, obj2){
let result = false;
if (typeof obj1 !== "object" || obj1 == null || typeof obj2 !== "object" || obj2 == null){
  return result; // either not objects or null
}
if(Object.keys(obj1).length === 0 || Object.keys(obj2).length === 0) {
  return true;
}
 
for (let key in obj1){
  if (obj1[key] === obj2[key]){
    result = true;
  } else if (typeof obj1[key] === "object"){
    result = deepEqual(obj1[key], obj2[key]);
  } else {
    result = obj1 === obj2;
  }
  return result;
}
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
